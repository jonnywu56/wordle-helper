{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ClockIcon } from '@heroicons/react/outline';\nimport { format } from 'date-fns';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { AlertContainer } from './components/alerts/AlertContainer';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { DatePickerModal } from './components/modals/DatePickerModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { MigrateStatsModal } from './components/modals/MigrateStatsModal';\nimport { SettingsModal } from './components/modals/SettingsModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { Navbar } from './components/navbar/Navbar';\nimport { DATE_LOCALE, DISCOURAGE_INAPP_BROWSERS, LONG_ALERT_TIME_MS, MAX_CHALLENGES, REVEAL_TIME_MS, WELCOME_INFO_MODAL_MS } from './constants/settings';\nimport { CORRECT_WORD_MESSAGE, DISCOURAGE_INAPP_BROWSER_TEXT, GAME_COPIED_MESSAGE, HARD_MODE_ALERT_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, SHARE_FAILURE_TEXT, WIN_MESSAGES, WORD_NOT_FOUND_MESSAGE } from './constants/strings';\nimport { WORDS } from './constants/wordlist';\nimport { useAlert } from './context/AlertContext';\nimport { isInAppBrowser } from './lib/browser';\nimport { getStoredIsHighContrastMode, loadGameStateFromLocalStorage, saveGameStateToLocalStorage, setStoredIsHighContrastMode } from './lib/localStorage';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { findFirstUnusedReveal, getGameDate, getIsLatestGame, isWordInWordList, setGameDate, solution, solutionGameDate, unicodeLength } from './lib/words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const isLatestGame = getIsLatestGame();\n  const gameDate = getGameDate();\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const {\n    showError: showErrorAlert,\n    showSuccess: showSuccessAlert\n  } = useAlert();\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentStatus, setCurrentStatus] = useState(() => {\n    return [];\n  });\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false);\n  const [isMigrateStatsModalOpen, setIsMigrateStatsModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [currentRowClass, setCurrentRowClass] = useState('');\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [isHighContrastMode, setIsHighContrastMode] = useState(getStoredIsHighContrastMode());\n  const [isRevealing, setIsRevealing] = useState(-1);\n  const [guesses, setGuesses] = useState(() => {\n    return [];\n  });\n  const [statuses, setStatuses] = useState(() => {\n    return [];\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false);\n  const [validGuesses, setValidGuesses] = useState([...WORDS]);\n  const [charStatus, setCharStatus] = useState(Array(26).fill({\n    value: 'unknown'\n  }));\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true);\n      }, WELCOME_INFO_MODAL_MS);\n    }\n  });\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS && isInAppBrowser() && showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n      persist: false,\n      durationMs: 7000\n    });\n  }, [showErrorAlert]);\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  }, [isDarkMode, isHighContrastMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  const handleHardMode = isHard => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard);\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE);\n    }\n  };\n\n  const handleHighContrastMode = isHighContrast => {\n    setIsHighContrastMode(isHighContrast);\n    setStoredIsHighContrastMode(isHighContrast);\n  };\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('');\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), {\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage = WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)];\n      const delayMs = REVEAL_TIME_MS * solution.length;\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true)\n      });\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, (solution.length + 1) * REVEAL_TIME_MS);\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert]);\n\n  const onCell = position => {\n    var newStatus = [...currentStatus];\n\n    if (currentStatus[position] === 'absent') {\n      newStatus[position] = 'present';\n    } else if (currentStatus[position] === 'present') {\n      newStatus[position] = 'correct';\n    } else {\n      newStatus[position] = 'absent';\n    }\n\n    setCurrentStatus(newStatus);\n    setIsRevealing(position);\n    setTimeout(() => {\n      setIsRevealing(-1);\n    }, REVEAL_TIME_MS);\n  };\n\n  const onChar = value => {\n    if (unicodeLength(`${currentGuess}${value}`) <= solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n      setCurrentStatus([...currentStatus, 'absent']);\n      console.log(currentGuess);\n      console.log(currentStatus);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n    setCurrentStatus(currentStatus.slice(0, -1));\n    console.log(currentStatus);\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    } // enforce hard mode - all guesses must contain all previously revealed letters\n\n\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle');\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass\n        });\n      }\n    }\n\n    var newCharStatus = charStatus;\n\n    for (let i = 0; i < currentStatus.length; i++) {\n      if (currentStatus[i] == 'absent') {\n        if (newCharStatus[i] !== 'unknown' && newCharStatus[i] !== 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        newCharStatus[i] = 'absent';\n      } else if (currentStatus[i] == 'present') {\n        if (newCharStatus[i] == 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        if (newCharStatus[i] !== 'correct') newCharStatus[i] = 'present';\n      } else {\n        if (currentStatus[i] == 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        newCharStatus[i] = 'correct';\n      }\n    }\n\n    const winningWord = false;\n    /*var temp = getValidGuesses(\n      validGuesses,\n      currentGuess.toLocaleLowerCase(),\n      currentStatus\n    )\n    */\n    //setValidGuesses(temp)\n    //console.log(temp)\n\n    if (unicodeLength(currentGuess) === solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setStatuses([...statuses, currentStatus]);\n      setCurrentStatus([]);\n      setGuesses([...guesses, currentGuess]);\n      console.log(statuses);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length));\n        }\n\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        }\n\n        setIsGameLost(true);\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Div100vh, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-full flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        setIsInfoModalOpen: setIsInfoModalOpen,\n        setIsStatsModalOpen: setIsStatsModalOpen,\n        setIsDatePickerModalOpen: setIsDatePickerModalOpen,\n        setIsSettingsModalOpen: setIsSettingsModalOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), !isLatestGame && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(ClockIcon, {\n          className: \"h-6 w-6 stroke-gray-600 dark:stroke-gray-300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-base text-gray-600 dark:text-gray-300\",\n          children: format(gameDate, 'd MMMM yyyy', {\n            locale: DATE_LOCALE\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex grow flex-col justify-center pb-6 short:pb-2\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            solution: solution,\n            guesses: guesses,\n            statuses: statuses,\n            currentGuess: currentGuess,\n            currentStatus: currentStatus,\n            onCell: onCell,\n            isRevealing: isRevealing,\n            currentRowClassName: currentRowClass\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n          onChar: onChar,\n          onDelete: onDelete,\n          onEnter: onEnter,\n          solution: solution,\n          guesses: guesses //isRevealing={isRevealing}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n          isOpen: isInfoModalOpen,\n          handleClose: () => setIsInfoModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n          isOpen: isStatsModalOpen,\n          handleClose: () => setIsStatsModalOpen(false),\n          solution: solution,\n          guesses: guesses,\n          gameStats: stats,\n          isLatestGame: isLatestGame,\n          isGameLost: isGameLost,\n          isGameWon: isGameWon,\n          handleShareToClipboard: () => showSuccessAlert(GAME_COPIED_MESSAGE),\n          handleShareFailure: () => showErrorAlert(SHARE_FAILURE_TEXT, {\n            durationMs: LONG_ALERT_TIME_MS\n          }),\n          handleMigrateStatsButton: () => {\n            setIsStatsModalOpen(false);\n            setIsMigrateStatsModalOpen(true);\n          },\n          isHardMode: isHardMode,\n          isDarkMode: isDarkMode,\n          isHighContrastMode: isHighContrastMode,\n          numberOfGuessesMade: guesses.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePickerModal, {\n          isOpen: isDatePickerModalOpen,\n          initialDate: solutionGameDate,\n          handleSelectDate: d => {\n            setIsDatePickerModalOpen(false);\n            setGameDate(d);\n          },\n          handleClose: () => setIsDatePickerModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MigrateStatsModal, {\n          isOpen: isMigrateStatsModalOpen,\n          handleClose: () => setIsMigrateStatsModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n          isOpen: isSettingsModalOpen,\n          handleClose: () => setIsSettingsModalOpen(false),\n          isHardMode: isHardMode,\n          handleHardMode: handleHardMode,\n          isDarkMode: isDarkMode,\n          handleDarkMode: handleDarkMode,\n          isHighContrastMode: isHighContrastMode,\n          handleHighContrastMode: handleHighContrastMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"c02E26USdopU5+Slq907ysCt0jk=\", false, function () {\n  return [useAlert];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/App.tsx"],"names":["ClockIcon","format","default","GraphemeSplitter","useEffect","useState","Div100vh","AlertContainer","Grid","Keyboard","DatePickerModal","InfoModal","MigrateStatsModal","SettingsModal","StatsModal","Navbar","DATE_LOCALE","DISCOURAGE_INAPP_BROWSERS","LONG_ALERT_TIME_MS","MAX_CHALLENGES","REVEAL_TIME_MS","WELCOME_INFO_MODAL_MS","CORRECT_WORD_MESSAGE","DISCOURAGE_INAPP_BROWSER_TEXT","GAME_COPIED_MESSAGE","HARD_MODE_ALERT_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","SHARE_FAILURE_TEXT","WIN_MESSAGES","WORD_NOT_FOUND_MESSAGE","WORDS","useAlert","isInAppBrowser","getStoredIsHighContrastMode","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","setStoredIsHighContrastMode","addStatsForCompletedGame","loadStats","findFirstUnusedReveal","getGameDate","getIsLatestGame","isWordInWordList","setGameDate","solution","solutionGameDate","unicodeLength","App","isLatestGame","gameDate","prefersDarkMode","window","matchMedia","matches","showError","showErrorAlert","showSuccess","showSuccessAlert","currentGuess","setCurrentGuess","currentStatus","setCurrentStatus","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isStatsModalOpen","setIsStatsModalOpen","isDatePickerModalOpen","setIsDatePickerModalOpen","isMigrateStatsModalOpen","setIsMigrateStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","isHighContrastMode","setIsHighContrastMode","isRevealing","setIsRevealing","guesses","setGuesses","statuses","setStatuses","stats","setStats","isHardMode","setIsHardMode","validGuesses","setValidGuesses","charStatus","setCharStatus","Array","fill","value","setTimeout","persist","durationMs","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","length","handleHighContrastMode","isHighContrast","clearCurrentRowClass","winMessage","Math","floor","random","delayMs","onClose","onCell","position","newStatus","onChar","console","log","onDelete","splitGraphemes","slice","join","onEnter","firstMissingReveal","newCharStatus","i","winningWord","locale","d"],"mappings":"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","sourcesContent":["import './App.css'\n\nimport { ClockIcon } from '@heroicons/react/outline'\nimport { format } from 'date-fns'\nimport { once } from 'events'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\nimport { useEffect, useState } from 'react'\nimport Div100vh from 'react-div-100vh'\n\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { DatePickerModal } from './components/modals/DatePickerModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { MigrateStatsModal } from './components/modals/MigrateStatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { Navbar } from './components/navbar/Navbar'\nimport {\n  DATE_LOCALE,\n  DISCOURAGE_INAPP_BROWSERS,\n  LONG_ALERT_TIME_MS,\n  MAX_CHALLENGES,\n  REVEAL_TIME_MS,\n  WELCOME_INFO_MODAL_MS,\n} from './constants/settings'\nimport {\n  CORRECT_WORD_MESSAGE,\n  DISCOURAGE_INAPP_BROWSER_TEXT,\n  GAME_COPIED_MESSAGE,\n  HARD_MODE_ALERT_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  SHARE_FAILURE_TEXT,\n  WIN_MESSAGES,\n  WORD_NOT_FOUND_MESSAGE,\n} from './constants/strings'\nimport { WORDS } from './constants/wordlist'\nimport { useAlert } from './context/AlertContext'\nimport { isInAppBrowser } from './lib/browser'\nimport {\n  getStoredIsHighContrastMode,\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n} from './lib/localStorage'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport { CharStatus, getGuessStatuses } from './lib/statuses'\nimport {\n  findFirstUnusedReveal,\n  getGameDate,\n  getIsLatestGame,\n  getValidGuesses,\n  isWinningWord,\n  isWordInWordList,\n  setGameDate,\n  solution,\n  solutionGameDate,\n  unicodeLength,\n} from './lib/words'\n\nfunction App() {\n  const isLatestGame = getIsLatestGame()\n  const gameDate = getGameDate()\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [currentStatus, setCurrentStatus] = useState<CharStatus[]>(() => {\n    return []\n  })\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false)\n  const [isMigrateStatsModalOpen, setIsMigrateStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  const [isRevealing, setIsRevealing] = useState(-1)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    return []\n  })\n  const [statuses, setStatuses] = useState<CharStatus[][]>(() => {\n    return []\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n\n  const [validGuesses, setValidGuesses] = useState([...WORDS])\n  const [charStatus, setCharStatus] = useState(\n    Array(26).fill({ value: 'unknown' })\n  )\n\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true)\n      }, WELCOME_INFO_MODAL_MS)\n    }\n  })\n\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS &&\n      isInAppBrowser() &&\n      showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n        persist: false,\n        durationMs: 7000,\n      })\n  }, [showErrorAlert])\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE)\n    }\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), { guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage =\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      const delayMs = REVEAL_TIME_MS * solution.length\n\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true),\n      })\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, (solution.length + 1) * REVEAL_TIME_MS)\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert])\n\n  const onCell = (position: number) => {\n    var newStatus = [...currentStatus]\n    if (currentStatus[position] === 'absent') {\n      newStatus[position] = 'present'\n    } else if (currentStatus[position] === 'present') {\n      newStatus[position] = 'correct'\n    } else {\n      newStatus[position] = 'absent'\n    }\n    setCurrentStatus(newStatus)\n    setIsRevealing(position)\n    setTimeout(() => {\n      setIsRevealing(-1)\n    }, REVEAL_TIME_MS)\n  }\n\n  const onChar = (value: string) => {\n    if (\n      unicodeLength(`${currentGuess}${value}`) <= solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n      setCurrentStatus([...currentStatus, 'absent'])\n      console.log(currentGuess)\n      console.log(currentStatus)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(\n      new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join('')\n    )\n    setCurrentStatus(currentStatus.slice(0, -1))\n    console.log(currentStatus)\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle')\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass,\n        })\n      }\n    }\n\n    var newCharStatus = charStatus\n    for (let i = 0; i < currentStatus.length; i++) {\n      if (currentStatus[i] == 'absent') {\n        if (newCharStatus[i] !== 'unknown' && newCharStatus[i] !== 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        newCharStatus[i] = 'absent'\n      } else if (currentStatus[i] == 'present') {\n        if (newCharStatus[i] == 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        if (newCharStatus[i] !== 'correct') newCharStatus[i] = 'present'\n      } else {\n        if (currentStatus[i] == 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        newCharStatus[i] = 'correct'\n      }\n    }\n\n    const winningWord = false\n\n    /*var temp = getValidGuesses(\n      validGuesses,\n      currentGuess.toLocaleLowerCase(),\n      currentStatus\n    )\n    */\n    //setValidGuesses(temp)\n    //console.log(temp)\n    if (\n      unicodeLength(currentGuess) === solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setStatuses([...statuses, currentStatus])\n      setCurrentStatus([])\n\n      setGuesses([...guesses, currentGuess])\n\n      console.log(statuses)\n      setCurrentGuess('')\n\n      if (winningWord) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length))\n        }\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        }\n        setIsGameLost(true)\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1,\n        })\n      }\n    }\n  }\n\n  return (\n    <Div100vh>\n      <div className=\"flex h-full flex-col\">\n        <Navbar\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsStatsModalOpen={setIsStatsModalOpen}\n          setIsDatePickerModalOpen={setIsDatePickerModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n\n        {!isLatestGame && (\n          <div className=\"flex items-center justify-center\">\n            <ClockIcon className=\"h-6 w-6 stroke-gray-600 dark:stroke-gray-300\" />\n            <p className=\"text-base text-gray-600 dark:text-gray-300\">\n              {format(gameDate, 'd MMMM yyyy', { locale: DATE_LOCALE })}\n            </p>\n          </div>\n        )}\n\n        <div className=\"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n          <div className=\"flex grow flex-col justify-center pb-6 short:pb-2\">\n            <Grid\n              solution={solution}\n              guesses={guesses}\n              statuses={statuses}\n              currentGuess={currentGuess}\n              currentStatus={currentStatus}\n              onCell={onCell}\n              isRevealing={isRevealing}\n              currentRowClassName={currentRowClass}\n            />\n          </div>\n          <Keyboard\n            onChar={onChar}\n            onDelete={onDelete}\n            onEnter={onEnter}\n            solution={solution}\n            guesses={guesses}\n            //isRevealing={isRevealing}\n          />\n          <InfoModal\n            isOpen={isInfoModalOpen}\n            handleClose={() => setIsInfoModalOpen(false)}\n          />\n          <StatsModal\n            isOpen={isStatsModalOpen}\n            handleClose={() => setIsStatsModalOpen(false)}\n            solution={solution}\n            guesses={guesses}\n            gameStats={stats}\n            isLatestGame={isLatestGame}\n            isGameLost={isGameLost}\n            isGameWon={isGameWon}\n            handleShareToClipboard={() => showSuccessAlert(GAME_COPIED_MESSAGE)}\n            handleShareFailure={() =>\n              showErrorAlert(SHARE_FAILURE_TEXT, {\n                durationMs: LONG_ALERT_TIME_MS,\n              })\n            }\n            handleMigrateStatsButton={() => {\n              setIsStatsModalOpen(false)\n              setIsMigrateStatsModalOpen(true)\n            }}\n            isHardMode={isHardMode}\n            isDarkMode={isDarkMode}\n            isHighContrastMode={isHighContrastMode}\n            numberOfGuessesMade={guesses.length}\n          />\n          <DatePickerModal\n            isOpen={isDatePickerModalOpen}\n            initialDate={solutionGameDate}\n            handleSelectDate={(d) => {\n              setIsDatePickerModalOpen(false)\n              setGameDate(d)\n            }}\n            handleClose={() => setIsDatePickerModalOpen(false)}\n          />\n          <MigrateStatsModal\n            isOpen={isMigrateStatsModalOpen}\n            handleClose={() => setIsMigrateStatsModalOpen(false)}\n          />\n          <SettingsModal\n            isOpen={isSettingsModalOpen}\n            handleClose={() => setIsSettingsModalOpen(false)}\n            isHardMode={isHardMode}\n            handleHardMode={handleHardMode}\n            isDarkMode={isDarkMode}\n            handleDarkMode={handleDarkMode}\n            isHighContrastMode={isHighContrastMode}\n            handleHighContrastMode={handleHighContrastMode}\n          />\n          <AlertContainer />\n        </div>\n      </div>\n    </Div100vh>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}