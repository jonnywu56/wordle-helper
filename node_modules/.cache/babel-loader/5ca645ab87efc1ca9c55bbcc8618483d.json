{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/components/grid/Cell.tsx\";\nimport classnames from 'classnames';\nimport { REVEAL_TIME_MS } from '../../constants/settings';\nimport { getStoredIsHighContrastMode } from '../../lib/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Cell = _ref => {\n  let {\n    value,\n    status,\n    isRevealing,\n    isCompleted,\n    onCell,\n    position = 0\n  } = _ref;\n  const isFilled = value && !isCompleted;\n  const shouldReveal = isRevealing && isCompleted;\n  const animationDelay = `${position * REVEAL_TIME_MS}ms`;\n  const isHighContrast = getStoredIsHighContrastMode();\n  const classes = classnames('xxshort:w-11 xxshort:h-11 short:text-2xl short:w-12 short:h-12 w-14 h-14 border-solid border-2 flex items-center justify-center mx-0.5 text-4xl font-bold rounded dark:text-white', {\n    'bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-600': !status,\n    'border-black dark:border-slate-100': value && !status,\n    'absent shadowed bg-slate-400 dark:bg-slate-700 text-white border-slate-400 dark:border-slate-700': status === 'absent',\n    'correct shadowed bg-orange-500 text-white border-orange-500': status === 'correct' && isHighContrast,\n    'present shadowed bg-cyan-500 text-white border-cyan-500': status === 'present' && isHighContrast,\n    'correct shadowed bg-green-500 text-white border-green-500': status === 'correct' && !isHighContrast,\n    'present shadowed bg-yellow-500 text-white border-yellow-500': status === 'present' && !isHighContrast,\n    'cell-fill-animation': isFilled,\n    'cell-reveal': shouldReveal\n  });\n\n  const handleClick = event => {\n    if (onCell) {\n      onCell(position);\n      event.currentTarget.blur();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    style: {\n      animationDelay\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: [\"x\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"letter-container\",\n        style: {\n          animationDelay\n        },\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/components/grid/Cell.tsx"],"names":["classnames","REVEAL_TIME_MS","getStoredIsHighContrastMode","Cell","value","status","isRevealing","isCompleted","onCell","position","isFilled","shouldReveal","animationDelay","isHighContrast","classes","handleClick","event","currentTarget","blur"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,YAAvB;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,2BAAT,QAA4C,wBAA5C;;AAYA,OAAO,MAAMC,IAAI,GAAG,QAOP;AAAA,MAPQ;AACnBC,IAAAA,KADmB;AAEnBC,IAAAA,MAFmB;AAGnBC,IAAAA,WAHmB;AAInBC,IAAAA,WAJmB;AAKnBC,IAAAA,MALmB;AAMnBC,IAAAA,QAAQ,GAAG;AANQ,GAOR;AACX,QAAMC,QAAQ,GAAGN,KAAK,IAAI,CAACG,WAA3B;AACA,QAAMI,YAAY,GAAGL,WAAW,IAAIC,WAApC;AACA,QAAMK,cAAc,GAAI,GAAEH,QAAQ,GAAGR,cAAe,IAApD;AACA,QAAMY,cAAc,GAAGX,2BAA2B,EAAlD;AAEA,QAAMY,OAAO,GAAGd,UAAU,CACxB,mLADwB,EAExB;AACE,yEACE,CAACK,MAFL;AAGE,0CAAsCD,KAAK,IAAI,CAACC,MAHlD;AAIE,wGACEA,MAAM,KAAK,QALf;AAME,mEACEA,MAAM,KAAK,SAAX,IAAwBQ,cAP5B;AAQE,+DACER,MAAM,KAAK,SAAX,IAAwBQ,cAT5B;AAUE,iEACER,MAAM,KAAK,SAAX,IAAwB,CAACQ,cAX7B;AAYE,mEACER,MAAM,KAAK,SAAX,IAAwB,CAACQ,cAb7B;AAcE,2BAAuBH,QAdzB;AAeE,mBAAeC;AAfjB,GAFwB,CAA1B;;AAqBA,QAAMI,WAAuD,GAAIC,KAAD,IAAW;AACzE,QAAIR,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,QAAD,CAAN;AACAO,MAAAA,KAAK,CAACC,aAAN,CAAoBC,IAApB;AACD;AACF,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAEJ,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEF,MAAAA;AAAF,KAAhC;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAEG,WAAjB;AAAA,mCAEE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAkC,QAAA,KAAK,EAAE;AAAEH,UAAAA;AAAF,SAAzC;AAAA,kBACGR;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAnDM;KAAMD,I","sourcesContent":["import classnames from 'classnames'\n\nimport { REVEAL_TIME_MS } from '../../constants/settings'\nimport { getStoredIsHighContrastMode } from '../../lib/localStorage'\nimport { CharStatus } from '../../lib/statuses'\n\ntype Props = {\n  value?: string\n  status?: CharStatus\n  isRevealing?: boolean\n  isCompleted?: boolean\n  position?: number\n  onCell?: (position: number) => void\n}\n\nexport const Cell = ({\n  value,\n  status,\n  isRevealing,\n  isCompleted,\n  onCell,\n  position = 0,\n}: Props) => {\n  const isFilled = value && !isCompleted\n  const shouldReveal = isRevealing && isCompleted\n  const animationDelay = `${position * REVEAL_TIME_MS}ms`\n  const isHighContrast = getStoredIsHighContrastMode()\n\n  const classes = classnames(\n    'xxshort:w-11 xxshort:h-11 short:text-2xl short:w-12 short:h-12 w-14 h-14 border-solid border-2 flex items-center justify-center mx-0.5 text-4xl font-bold rounded dark:text-white',\n    {\n      'bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-600':\n        !status,\n      'border-black dark:border-slate-100': value && !status,\n      'absent shadowed bg-slate-400 dark:bg-slate-700 text-white border-slate-400 dark:border-slate-700':\n        status === 'absent',\n      'correct shadowed bg-orange-500 text-white border-orange-500':\n        status === 'correct' && isHighContrast,\n      'present shadowed bg-cyan-500 text-white border-cyan-500':\n        status === 'present' && isHighContrast,\n      'correct shadowed bg-green-500 text-white border-green-500':\n        status === 'correct' && !isHighContrast,\n      'present shadowed bg-yellow-500 text-white border-yellow-500':\n        status === 'present' && !isHighContrast,\n      'cell-fill-animation': isFilled,\n      'cell-reveal': shouldReveal,\n    }\n  )\n\n  const handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n    if (onCell) {\n      onCell(position)\n      event.currentTarget.blur()\n    }\n  }\n\n  return (\n    <div className={classes} style={{ animationDelay }}>\n      <button onClick={handleClick}>\n        x\n        <div className=\"letter-container\" style={{ animationDelay }}>\n          {value}\n        </div>\n      </button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}