{"ast":null,"code":"import { addDays, differenceInDays, formatISO, parseISO, startOfDay } from 'date-fns';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport queryString from 'query-string';\nimport { ENABLE_ARCHIVED_GAMES } from '../constants/settings';\nimport { NOT_CONTAINED_MESSAGE, WRONG_SPOT_MESSAGE } from '../constants/strings';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WORDS } from '../constants/wordlist';\nimport { getToday } from './dateutils';\nimport { getGuessStatuses } from './statuses'; // 1 January 2022 Game Epoch\n\nexport const firstGameDate = new Date(2022, 0);\nexport const periodInDays = 1;\nexport const isWordInWordList = word => {\n  return WORDS.includes(localeAwareLowerCase(word)) || VALID_GUESSES.includes(localeAwareLowerCase(word));\n};\nexport const isWinningWord = word => {\n  return solution === word;\n};\n\nconst checkValidGuess = (validWord, guess, statuses) => {\n  var validWordArray = Array.from(validWord);\n\n  for (let i = 0; i < validWordArray.length; i++) {\n    if (statuses[i] === 'correct') {\n      if (validWordArray[i] !== guess[i]) {\n        return false;\n      }\n    } else if (statuses[i] === 'present') {\n      var found = false;\n\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (i !== j && // can't be same index b/c yellow\n        validWordArray[j] === guess[i] && // make sure match\n        statuses[j] != 'green') // isn't reserved for green\n          found = true;\n        validWordArray[j] = '';\n        break;\n      }\n\n      if (!found) {\n        return false;\n      }\n    } else {\n      if (guess.includes(validWordArray[i])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport const getValidGuesses = (validWords, guess, statuses) => {\n  return validWords.map(validWord => checkValidGuess(validWord, guess, statuses));\n}; // build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\n\nexport const findFirstUnusedReveal = (word, guesses) => {\n  if (guesses.length === 0) {\n    return false;\n  }\n\n  const lettersLeftArray = new Array();\n  const guess = guesses[guesses.length - 1];\n  const statuses = getGuessStatuses(solution, guess);\n  const splitWord = unicodeSplit(word);\n  const splitGuess = unicodeSplit(guess);\n\n  for (let i = 0; i < splitGuess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(splitGuess[i]);\n    }\n\n    if (statuses[i] === 'correct' && splitWord[i] !== splitGuess[i]) {\n      return WRONG_SPOT_MESSAGE(splitGuess[i], i + 1);\n    }\n  } // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n\n\n  let n;\n\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter);\n\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1);\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0]);\n  }\n\n  return false;\n};\nexport const unicodeSplit = word => {\n  return new GraphemeSplitter().splitGraphemes(word);\n};\nexport const unicodeLength = word => {\n  return unicodeSplit(word).length;\n};\nexport const localeAwareLowerCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING) : text.toLowerCase();\n};\nexport const localeAwareUpperCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING) : text.toUpperCase();\n};\nexport const getLastGameDate = today => {\n  const t = startOfDay(today);\n  let daysSinceLastGame = differenceInDays(firstGameDate, t) % periodInDays;\n  return addDays(t, -daysSinceLastGame);\n};\nexport const getNextGameDate = today => {\n  return addDays(getLastGameDate(today), periodInDays);\n};\nexport const isValidGameDate = date => {\n  if (date < firstGameDate || date > getToday()) {\n    return false;\n  }\n\n  return differenceInDays(firstGameDate, date) % periodInDays === 0;\n};\nexport const getIndex = gameDate => {\n  let start = firstGameDate;\n  let index = -1;\n\n  do {\n    index++;\n    start = addDays(start, periodInDays);\n  } while (start <= gameDate);\n\n  return index;\n};\nexport const getWordOfDay = index => {\n  if (index < 0) {\n    throw new Error('Invalid index');\n  }\n\n  return localeAwareUpperCase(WORDS[index % WORDS.length]);\n};\nexport const getSolution = gameDate => {\n  const nextGameDate = getNextGameDate(gameDate);\n  const index = getIndex(gameDate);\n  const wordOfTheDay = getWordOfDay(index);\n  return {\n    solution: wordOfTheDay,\n    solutionGameDate: gameDate,\n    solutionIndex: index,\n    tomorrow: nextGameDate.valueOf()\n  };\n};\nexport const getGameDate = () => {\n  if (getIsLatestGame()) {\n    return getToday();\n  }\n\n  const parsed = queryString.parse(window.location.search);\n\n  try {\n    const d = startOfDay(parseISO(parsed.d.toString()));\n\n    if (d >= getToday() || d < firstGameDate) {\n      setGameDate(getToday());\n    }\n\n    return d;\n  } catch (e) {\n    console.log(e);\n    return getToday();\n  }\n};\nexport const setGameDate = d => {\n  try {\n    if (d < getToday()) {\n      window.location.href = '/?d=' + formatISO(d, {\n        representation: 'date'\n      });\n      return;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  window.location.href = '/';\n};\nexport const getIsLatestGame = () => {\n  if (!ENABLE_ARCHIVED_GAMES) {\n    return true;\n  }\n\n  const parsed = queryString.parse(window.location.search);\n  return parsed === null || !('d' in parsed);\n};\nexport const {\n  solution,\n  solutionGameDate,\n  solutionIndex,\n  tomorrow\n} = getSolution(getGameDate());","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/lib/words.ts"],"names":["addDays","differenceInDays","formatISO","parseISO","startOfDay","default","GraphemeSplitter","queryString","ENABLE_ARCHIVED_GAMES","NOT_CONTAINED_MESSAGE","WRONG_SPOT_MESSAGE","VALID_GUESSES","WORDS","getToday","getGuessStatuses","firstGameDate","Date","periodInDays","isWordInWordList","word","includes","localeAwareLowerCase","isWinningWord","solution","checkValidGuess","validWord","guess","statuses","validWordArray","Array","from","i","length","found","j","getValidGuesses","validWords","map","findFirstUnusedReveal","guesses","lettersLeftArray","splitWord","unicodeSplit","splitGuess","push","n","letter","indexOf","splice","splitGraphemes","unicodeLength","text","process","env","REACT_APP_LOCALE_STRING","toLocaleLowerCase","toLowerCase","localeAwareUpperCase","toLocaleUpperCase","toUpperCase","getLastGameDate","today","t","daysSinceLastGame","getNextGameDate","isValidGameDate","date","getIndex","gameDate","start","index","getWordOfDay","Error","getSolution","nextGameDate","wordOfTheDay","solutionGameDate","solutionIndex","tomorrow","valueOf","getGameDate","getIsLatestGame","parsed","parse","window","location","search","d","toString","setGameDate","e","console","log","href","representation"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  differenceInDays,\n  formatISO,\n  parseISO,\n  startOfDay,\n} from 'date-fns'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\nimport queryString from 'query-string'\n\nimport { ENABLE_ARCHIVED_GAMES } from '../constants/settings'\nimport { NOT_CONTAINED_MESSAGE, WRONG_SPOT_MESSAGE } from '../constants/strings'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { WORDS } from '../constants/wordlist'\nimport { getToday } from './dateutils'\nimport { getGuessStatuses } from './statuses'\n\n// 1 January 2022 Game Epoch\nexport const firstGameDate = new Date(2022, 0)\nexport const periodInDays = 1\n\nexport const isWordInWordList = (word: string) => {\n  return (\n    WORDS.includes(localeAwareLowerCase(word)) ||\n    VALID_GUESSES.includes(localeAwareLowerCase(word))\n  )\n}\n\nexport const isWinningWord = (word: string) => {\n  return solution === word\n}\n\nconst checkValidGuess = (\n  validWord: string,\n  guess: string,\n  statuses: Array<string>\n) => {\n  var validWordArray = Array.from(validWord)\n  for (let i = 0; i < validWordArray.length; i++) {\n    if (statuses[i] === 'correct') {\n      if (validWordArray[i] !== guess[i]) {\n        return false\n      }\n    } else if (statuses[i] === 'present') {\n      var found = false\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (\n          i !== j && // can't be same index b/c yellow\n          validWordArray[j] === guess[i] && // make sure match\n          statuses[j] != 'green'\n        )\n          // isn't reserved for green\n          found = true\n        validWordArray[j] = ''\n        break\n      }\n      if (!found) {\n        return false\n      }\n    } else {\n      if (guess.includes(validWordArray[i])) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nexport const getValidGuesses = (\n  validWords: Array<string>,\n  guess: string,\n  statuses: Array<string>\n) => {\n  return validWords.map((validWord) =>\n    checkValidGuess(validWord, guess, statuses)\n  )\n}\n\n// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport const findFirstUnusedReveal = (word: string, guesses: string[]) => {\n  if (guesses.length === 0) {\n    return false\n  }\n\n  const lettersLeftArray = new Array<string>()\n  const guess = guesses[guesses.length - 1]\n  const statuses = getGuessStatuses(solution, guess)\n  const splitWord = unicodeSplit(word)\n  const splitGuess = unicodeSplit(guess)\n\n  for (let i = 0; i < splitGuess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(splitGuess[i])\n    }\n    if (statuses[i] === 'correct' && splitWord[i] !== splitGuess[i]) {\n      return WRONG_SPOT_MESSAGE(splitGuess[i], i + 1)\n    }\n  }\n\n  // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n  let n\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter)\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1)\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0])\n  }\n  return false\n}\n\nexport const unicodeSplit = (word: string) => {\n  return new GraphemeSplitter().splitGraphemes(word)\n}\n\nexport const unicodeLength = (word: string) => {\n  return unicodeSplit(word).length\n}\n\nexport const localeAwareLowerCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toLowerCase()\n}\n\nexport const localeAwareUpperCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toUpperCase()\n}\n\nexport const getLastGameDate = (today: Date) => {\n  const t = startOfDay(today)\n  let daysSinceLastGame = differenceInDays(firstGameDate, t) % periodInDays\n  return addDays(t, -daysSinceLastGame)\n}\n\nexport const getNextGameDate = (today: Date) => {\n  return addDays(getLastGameDate(today), periodInDays)\n}\n\nexport const isValidGameDate = (date: Date) => {\n  if (date < firstGameDate || date > getToday()) {\n    return false\n  }\n\n  return differenceInDays(firstGameDate, date) % periodInDays === 0\n}\n\nexport const getIndex = (gameDate: Date) => {\n  let start = firstGameDate\n  let index = -1\n  do {\n    index++\n    start = addDays(start, periodInDays)\n  } while (start <= gameDate)\n\n  return index\n}\n\nexport const getWordOfDay = (index: number) => {\n  if (index < 0) {\n    throw new Error('Invalid index')\n  }\n\n  return localeAwareUpperCase(WORDS[index % WORDS.length])\n}\n\nexport const getSolution = (gameDate: Date) => {\n  const nextGameDate = getNextGameDate(gameDate)\n  const index = getIndex(gameDate)\n  const wordOfTheDay = getWordOfDay(index)\n  return {\n    solution: wordOfTheDay,\n    solutionGameDate: gameDate,\n    solutionIndex: index,\n    tomorrow: nextGameDate.valueOf(),\n  }\n}\n\nexport const getGameDate = () => {\n  if (getIsLatestGame()) {\n    return getToday()\n  }\n\n  const parsed = queryString.parse(window.location.search)\n  try {\n    const d = startOfDay(parseISO(parsed.d!.toString()))\n    if (d >= getToday() || d < firstGameDate) {\n      setGameDate(getToday())\n    }\n    return d\n  } catch (e) {\n    console.log(e)\n    return getToday()\n  }\n}\n\nexport const setGameDate = (d: Date) => {\n  try {\n    if (d < getToday()) {\n      window.location.href = '/?d=' + formatISO(d, { representation: 'date' })\n      return\n    }\n  } catch (e) {\n    console.log(e)\n  }\n  window.location.href = '/'\n}\n\nexport const getIsLatestGame = () => {\n  if (!ENABLE_ARCHIVED_GAMES) {\n    return true\n  }\n  const parsed = queryString.parse(window.location.search)\n  return parsed === null || !('d' in parsed)\n}\n\nexport const { solution, solutionGameDate, solutionIndex, tomorrow } =\n  getSolution(getGameDate())\n"]},"metadata":{},"sourceType":"module"}