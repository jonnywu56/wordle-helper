{"ast":null,"code":"import { default as GraphemeSplitter } from 'grapheme-splitter';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WORDS } from '../constants/wordlist';\nexport const isWordInWordList = word => {\n  return WORDS.includes(localeAwareLowerCase(word)) || VALID_GUESSES.includes(localeAwareLowerCase(word));\n};\n\nconst checkValidGuess = (validWord, guess, statuses) => {\n  var validWordArray = Array.from(validWord); //console.log(validWord)\n\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct') {\n      if (validWordArray[i] !== guess[i]) {\n        //console.log(validWord, \"green doens't match\", i)\n        //console.log(validWord, validWordArray, guess)\n        return false;\n      }\n\n      validWordArray[i] = '';\n    } else if (statuses[i] === 'present') {\n      var found = false;\n\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (i !== j && // can't be same index b/c yellow\n        validWordArray[j] === guess[i] && // make sure match\n        statuses[j] != 'correct') {\n          // isn't reserved for green\n          //console.log(validWord)\n          found = true;\n          validWordArray[j] = '';\n          break;\n        }\n      }\n\n      if (!found) {\n        //console.log(validWord, \"yellow doens't match\")\n        return false;\n      }\n    } else {\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (validWordArray[j] === guess[i] && statuses[j] !== 'correct') {\n          //console.log(validWord, \"grey doens't match\", i)\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nexport const getValidGuesses = (validWords, guess, statuses) => {\n  var remainder = validWords.filter(validWord => checkValidGuess(validWord, guess, statuses));\n  return remainder;\n};\nexport const unicodeSplit = word => {\n  return new GraphemeSplitter().splitGraphemes(word);\n};\nexport const unicodeLength = word => {\n  return unicodeSplit(word).length;\n};\nexport const localeAwareLowerCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING) : text.toLowerCase();\n};\nexport const localeAwareUpperCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING) : text.toUpperCase();\n};","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/lib/words.ts"],"names":["default","GraphemeSplitter","VALID_GUESSES","WORDS","isWordInWordList","word","includes","localeAwareLowerCase","checkValidGuess","validWord","guess","statuses","validWordArray","Array","from","i","length","found","j","getValidGuesses","validWords","remainder","filter","unicodeSplit","splitGraphemes","unicodeLength","text","process","env","REACT_APP_LOCALE_STRING","toLocaleLowerCase","toLowerCase","localeAwareUpperCase","toLocaleUpperCase","toUpperCase"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  differenceInDays,\n  formatISO,\n  parseISO,\n  startOfDay,\n} from 'date-fns'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\nimport queryString from 'query-string'\n\nimport { ENABLE_ARCHIVED_GAMES } from '../constants/settings'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { WORDS } from '../constants/wordlist'\nimport { getToday } from './dateutils'\nimport { getGuessStatuses } from './statuses'\n\nexport const isWordInWordList = (word: string) => {\n  return (\n    WORDS.includes(localeAwareLowerCase(word)) ||\n    VALID_GUESSES.includes(localeAwareLowerCase(word))\n  )\n}\n\nconst checkValidGuess = (\n  validWord: string,\n  guess: string,\n  statuses: Array<string>\n) => {\n  var validWordArray = Array.from(validWord)\n  //console.log(validWord)\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct') {\n      if (validWordArray[i] !== guess[i]) {\n        //console.log(validWord, \"green doens't match\", i)\n        //console.log(validWord, validWordArray, guess)\n        return false\n      }\n      validWordArray[i] = ''\n    } else if (statuses[i] === 'present') {\n      var found = false\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (\n          i !== j && // can't be same index b/c yellow\n          validWordArray[j] === guess[i] && // make sure match\n          statuses[j] != 'correct'\n        ) {\n          // isn't reserved for green\n          //console.log(validWord)\n          found = true\n          validWordArray[j] = ''\n          break\n        }\n      }\n      if (!found) {\n        //console.log(validWord, \"yellow doens't match\")\n        return false\n      }\n    } else {\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (validWordArray[j] === guess[i] && statuses[j] !== 'correct') {\n          //console.log(validWord, \"grey doens't match\", i)\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nexport const getValidGuesses = (\n  validWords: Array<string>,\n  guess: string,\n  statuses: Array<string>\n) => {\n  var remainder = validWords.filter((validWord) =>\n    checkValidGuess(validWord, guess, statuses)\n  )\n  return remainder\n}\n\nexport const unicodeSplit = (word: string) => {\n  return new GraphemeSplitter().splitGraphemes(word)\n}\n\nexport const unicodeLength = (word: string) => {\n  return unicodeSplit(word).length\n}\n\nexport const localeAwareLowerCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toLowerCase()\n}\n\nexport const localeAwareUpperCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toUpperCase()\n}\n"]},"metadata":{},"sourceType":"module"}