{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/components/list/WordList.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordList = _ref => {\n  let {\n    validWords\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-title\",\n      children: [\"Remaining Words: \", validWords.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-title\",\n      children: \"Scroll down for more!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"box\",\n      children: validWords.map((guess, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: guess\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n_c = WordList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/components/list/WordList.tsx"],"names":["WordList","validWords","length","map","guess","index"],"mappings":";;AAIA,OAAO,MAAMA,QAAQ,GAAG,QAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AACjD,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,sCAA8CA,UAAU,CAACC,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA,gBACGD,UAAU,CAACE,GAAX,CAAe,CAACC,KAAD,EAAQC,KAAR,kBACd;AAAA,kBAAiBD;AAAjB,SAASC,KAAT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAZM;KAAML,Q","sourcesContent":["type Props = {\n  validWords: string[]\n}\n\nexport const WordList = ({ validWords }: Props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"list-title\">Remaining Words: {validWords.length}</div>\n      <div className=\"list-title\">Scroll down for more!</div>\n      <ul className=\"box\">\n        {validWords.map((guess, index) => (\n          <li key={index}>{guess}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}