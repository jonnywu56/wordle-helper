{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/components/grid/CurrentRow.tsx\";\nimport { WORD_LENGTH } from '../..//constants/settings';\nimport { unicodeSplit } from '../../lib/words';\nimport { Cell } from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CurrentRow = _ref => {\n  let {\n    guess,\n    status,\n    onCell,\n    isRevealing,\n    className\n  } = _ref;\n  const splitGuess = unicodeSplit(guess);\n  const emptyCells = Array.from(Array(WORD_LENGTH - splitGuess.length));\n  const classes = `flex justify-center mb-1 ${className}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    children: [splitGuess.map((letter, i) => /*#__PURE__*/_jsxDEV(Cell, {\n      status: status[i],\n      value: letter,\n      position: i,\n      onCell: onCell,\n      isRevealingBool: isRevealing === i,\n      isOtherReveal: isRevealing >= 0,\n      isCompleted: true\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)), emptyCells.map((_, i) => /*#__PURE__*/_jsxDEV(Cell, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = CurrentRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentRow\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/components/grid/CurrentRow.tsx"],"names":["WORD_LENGTH","unicodeSplit","Cell","CurrentRow","guess","status","onCell","isRevealing","className","splitGuess","emptyCells","Array","from","length","classes","map","letter","i","_"],"mappings":";AAEA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,IAAT,QAAqB,QAArB;;AAWA,OAAO,MAAMC,UAAU,GAAG,QAMb;AAAA,MANc;AACzBC,IAAAA,KADyB;AAEzBC,IAAAA,MAFyB;AAGzBC,IAAAA,MAHyB;AAIzBC,IAAAA,WAJyB;AAKzBC,IAAAA;AALyB,GAMd;AACX,QAAMC,UAAU,GAAGR,YAAY,CAACG,KAAD,CAA/B;AACA,QAAMM,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACX,WAAW,GAAGS,UAAU,CAACI,MAA1B,CAAhB,CAAnB;AACA,QAAMC,OAAO,GAAI,4BAA2BN,SAAU,EAAtD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEM,OAAhB;AAAA,eACGL,UAAU,CAACM,GAAX,CAAe,CAACC,MAAD,EAASC,CAAT,kBACd,QAAC,IAAD;AAEE,MAAA,MAAM,EAAEZ,MAAM,CAACY,CAAD,CAFhB;AAGE,MAAA,KAAK,EAAED,MAHT;AAIE,MAAA,QAAQ,EAAEC,CAJZ;AAKE,MAAA,MAAM,EAAEX,MALV;AAME,MAAA,eAAe,EAAEC,WAAW,KAAKU,CANnC;AAOE,MAAA,aAAa,EAAEV,WAAW,IAAI,CAPhC;AAQE,MAAA,WAAW;AARb,OACOU,CADP;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAaGP,UAAU,CAACK,GAAX,CAAe,CAACG,CAAD,EAAID,CAAJ,kBACd,QAAC,IAAD,MAAWA,CAAX;AAAA;AAAA;AAAA;AAAA,YADD,CAbH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA9BM;KAAMd,U","sourcesContent":["import { CharStatus } from '@/lib/statuses'\n\nimport { WORD_LENGTH } from '../..//constants/settings'\nimport { unicodeSplit } from '../../lib/words'\nimport { Cell } from './Cell'\n\ntype Props = {\n  guess: string\n  status: CharStatus[]\n  isRevealing: number\n  isCompleted?: boolean\n  onCell: (position: number) => void\n  className: string\n}\n\nexport const CurrentRow = ({\n  guess,\n  status,\n  onCell,\n  isRevealing,\n  className,\n}: Props) => {\n  const splitGuess = unicodeSplit(guess)\n  const emptyCells = Array.from(Array(WORD_LENGTH - splitGuess.length))\n  const classes = `flex justify-center mb-1 ${className}`\n\n  return (\n    <div className={classes}>\n      {splitGuess.map((letter, i) => (\n        <Cell\n          key={i}\n          status={status[i]}\n          value={letter}\n          position={i}\n          onCell={onCell}\n          isRevealingBool={isRevealing === i}\n          isOtherReveal={isRevealing >= 0}\n          isCompleted\n        />\n      ))}\n      {emptyCells.map((_, i) => (\n        <Cell key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}