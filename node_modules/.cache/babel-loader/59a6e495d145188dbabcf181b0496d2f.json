{"ast":null,"code":"const checkValidGuess = (validWord, guess, statuses) => {\n  var validWordArray = Array.from(validWord); //console.log(validWord)\n\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct') {\n      if (validWordArray[i] !== guess[i]) {\n        //console.log(validWord, \"green doens't match\", i)\n        //console.log(validWord, validWordArray, guess)\n        return false;\n      }\n\n      validWordArray[i] = '';\n    } else if (statuses[i] === 'present') {\n      var found = false;\n\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (i !== j && // can't be same index b/c yellow\n        validWordArray[j] === guess[i] && // make sure match\n        statuses[j] !== 'correct') {\n          // isn't reserved for green\n          //console.log(validWord)\n          found = true;\n          validWordArray[j] = '';\n          break;\n        }\n      }\n\n      if (!found) {\n        //console.log(validWord, \"yellow doens't match\")\n        return false;\n      }\n    } else {\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (validWordArray[j] === guess[i] && statuses[j] !== 'correct') {\n          //console.log(validWord, \"grey doens't match\", i)\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nexport const getValidGuesses = (validWords, guess, statuses) => {\n  var remainder = validWords.filter(validWord => checkValidGuess(validWord, guess, statuses));\n  return remainder;\n};","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-helper/src/lib/statuses.ts"],"names":["checkValidGuess","validWord","guess","statuses","validWordArray","Array","from","i","length","found","j","getValidGuesses","validWords","remainder","filter"],"mappings":"AAEA,MAAMA,eAAe,GAAG,CACtBC,SADsB,EAEtBC,KAFsB,EAGtBC,QAHsB,KAInB;AACH,MAAIC,cAAc,GAAGC,KAAK,CAACC,IAAN,CAAWL,SAAX,CAArB,CADG,CAEH;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIJ,QAAQ,CAACI,CAAD,CAAR,KAAgB,SAApB,EAA+B;AAC7B,UAAIH,cAAc,CAACG,CAAD,CAAd,KAAsBL,KAAK,CAACK,CAAD,CAA/B,EAAoC;AAClC;AACA;AACA,eAAO,KAAP;AACD;;AACDH,MAAAA,cAAc,CAACG,CAAD,CAAd,GAAoB,EAApB;AACD,KAPD,MAOO,IAAIJ,QAAQ,CAACI,CAAD,CAAR,KAAgB,SAApB,EAA+B;AACpC,UAAIE,KAAK,GAAG,KAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAAc,CAACI,MAAnC,EAA2CE,CAAC,EAA5C,EAAgD;AAC9C,YACEH,CAAC,KAAKG,CAAN,IAAW;AACXN,QAAAA,cAAc,CAACM,CAAD,CAAd,KAAsBR,KAAK,CAACK,CAAD,CAD3B,IACkC;AAClCJ,QAAAA,QAAQ,CAACO,CAAD,CAAR,KAAgB,SAHlB,EAIE;AACA;AACA;AACAD,UAAAA,KAAK,GAAG,IAAR;AACAL,UAAAA,cAAc,CAACM,CAAD,CAAd,GAAoB,EAApB;AACA;AACD;AACF;;AACD,UAAI,CAACD,KAAL,EAAY;AACV;AACA,eAAO,KAAP;AACD;AACF,KAnBM,MAmBA;AACL,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAAc,CAACI,MAAnC,EAA2CE,CAAC,EAA5C,EAAgD;AAC9C,YAAIN,cAAc,CAACM,CAAD,CAAd,KAAsBR,KAAK,CAACK,CAAD,CAA3B,IAAkCJ,QAAQ,CAACO,CAAD,CAAR,KAAgB,SAAtD,EAAiE;AAC/D;AACA,iBAAO,KAAP;AACD;AACF;AACF;AACF;;AACD,SAAO,IAAP;AACD,CA5CD;;AA8CA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,UAD6B,EAE7BV,KAF6B,EAG7BC,QAH6B,KAI1B;AACH,MAAIU,SAAS,GAAGD,UAAU,CAACE,MAAX,CAAmBb,SAAD,IAChCD,eAAe,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,QAAnB,CADD,CAAhB;AAGA,SAAOU,SAAP;AACD,CATM","sourcesContent":["export type CharStatus = 'unknown' | 'absent' | 'present' | 'correct'\n\nconst checkValidGuess = (\n  validWord: string,\n  guess: string,\n  statuses: Array<string>\n) => {\n  var validWordArray = Array.from(validWord)\n  //console.log(validWord)\n  for (let i = 0; i < guess.length; i++) {\n    if (statuses[i] === 'correct') {\n      if (validWordArray[i] !== guess[i]) {\n        //console.log(validWord, \"green doens't match\", i)\n        //console.log(validWord, validWordArray, guess)\n        return false\n      }\n      validWordArray[i] = ''\n    } else if (statuses[i] === 'present') {\n      var found = false\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (\n          i !== j && // can't be same index b/c yellow\n          validWordArray[j] === guess[i] && // make sure match\n          statuses[j] !== 'correct'\n        ) {\n          // isn't reserved for green\n          //console.log(validWord)\n          found = true\n          validWordArray[j] = ''\n          break\n        }\n      }\n      if (!found) {\n        //console.log(validWord, \"yellow doens't match\")\n        return false\n      }\n    } else {\n      for (let j = 0; j < validWordArray.length; j++) {\n        if (validWordArray[j] === guess[i] && statuses[j] !== 'correct') {\n          //console.log(validWord, \"grey doens't match\", i)\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nexport const getValidGuesses = (\n  validWords: Array<string>,\n  guess: string,\n  statuses: Array<string>\n) => {\n  var remainder = validWords.filter((validWord) =>\n    checkValidGuess(validWord, guess, statuses)\n  )\n  return remainder\n}\n"]},"metadata":{},"sourceType":"module"}