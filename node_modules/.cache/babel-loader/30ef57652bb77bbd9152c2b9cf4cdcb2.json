{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { AlertContainer } from './components/alerts/AlertContainer';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { WordList } from './components/list/WordList';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { SettingsModal } from './components/modals/SettingsModal';\nimport { Navbar } from './components/navbar/Navbar';\nimport { DISCOURAGE_INAPP_BROWSERS, MAX_CHALLENGES, REVEAL_TIME_MS, WELCOME_INFO_MODAL_MS } from './constants/settings';\nimport { CORRECT_WORD_MESSAGE, DISCOURAGE_INAPP_BROWSER_TEXT, NOT_ENOUGH_LETTERS_MESSAGE, NOT_VALID_INPUT, WORD_NOT_FOUND_MESSAGE } from './constants/strings';\nimport { WORDS } from './constants/wordlist';\nimport { useAlert } from './context/AlertContext';\nimport { isInAppBrowser } from './lib/browser';\nimport { getStoredIsHighContrastMode, loadGameStateFromLocalStorage, saveGameStateToLocalStorage, setStoredIsHighContrastMode } from './lib/localStorage';\nimport { loadStats } from './lib/stats';\nimport { getIsLatestGame, getValidGuesses, isWordInWordList, solution, unicodeLength } from './lib/words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const isLatestGame = getIsLatestGame();\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const {\n    showError: showErrorAlert,\n    showSuccess: showSuccessAlert\n  } = useAlert();\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentStatus, setCurrentStatus] = useState(() => {\n    return Array(5).fill('unknown');\n  });\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [currentRowClass, setCurrentRowClass] = useState('');\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [isHighContrastMode, setIsHighContrastMode] = useState(getStoredIsHighContrastMode());\n  const [isRevealing, setIsRevealing] = useState(-1);\n  const [guesses, setGuesses] = useState(() => {\n    return [];\n  });\n  const [statuses, setStatuses] = useState(() => {\n    return [];\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  const [validGuesses, setValidGuesses] = useState([...WORDS.sort()]);\n  const [charStatus, setCharStatus] = useState(() => {\n    return Array(26).fill('unknown');\n  });\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true);\n      }, WELCOME_INFO_MODAL_MS);\n    }\n  });\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS && isInAppBrowser() && showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n      persist: false,\n      durationMs: 7000\n    });\n  }, [showErrorAlert]);\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  }, [isDarkMode, isHighContrastMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  const handleHighContrastMode = isHighContrast => {\n    setIsHighContrastMode(isHighContrast);\n    setStoredIsHighContrastMode(isHighContrast);\n  };\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('');\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), {\n      guesses,\n      solution\n    });\n  }, [guesses]);\n\n  const onCell = position => {\n    var newStatus = [...currentStatus];\n\n    if (currentStatus[position] === 'unknown') {\n      newStatus[position] = 'absent';\n    } else if (currentStatus[position] === 'absent') {\n      newStatus[position] = 'present';\n    } else if (currentStatus[position] === 'present') {\n      newStatus[position] = 'correct';\n    } else {\n      newStatus[position] = 'unknown';\n    }\n\n    setCurrentStatus(newStatus);\n    setIsRevealing(position);\n    setTimeout(() => {\n      setIsRevealing(-1);\n    }, REVEAL_TIME_MS);\n  };\n\n  const onChar = value => {\n    if (unicodeLength(`${currentGuess}${value}`) <= solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    if (currentGuess.length > 0) {\n      let newCurrentStatus = [...currentStatus];\n      newCurrentStatus[currentGuess.length - 1] = 'unknown';\n      setCurrentStatus(newCurrentStatus);\n    }\n\n    setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    var newCharStatus = [...charStatus];\n\n    for (let i = 0; i < currentStatus.length; i++) {\n      let letterIndex = currentGuess[i].charCodeAt(0) - 65;\n\n      if (currentStatus[i] === 'unknown') {\n        return showErrorAlert(NOT_VALID_INPUT, {\n          onClose: clearCurrentRowClass\n        });\n      } else if (currentStatus[i] === 'absent') {\n        if (charStatus[letterIndex] === 'present' || charStatus[letterIndex] === 'correct') {\n          return showErrorAlert(NOT_VALID_INPUT, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        if (newCharStatus[letterIndex] === 'unknown') {\n          newCharStatus[letterIndex] = 'absent';\n        }\n      } else if (currentStatus[i] === 'present') {\n        if (charStatus[letterIndex] === 'absent') {\n          return showErrorAlert(NOT_VALID_INPUT, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        if (charStatus[letterIndex] !== 'correct' && newCharStatus[letterIndex] !== 'correct') newCharStatus[letterIndex] = 'present';\n      } else {\n        if (currentStatus[i] === 'absent') {\n          return showErrorAlert(NOT_VALID_INPUT, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        newCharStatus[letterIndex] = 'correct';\n      }\n    }\n\n    let newValidGuesses = getValidGuesses(validGuesses, currentGuess.toLocaleLowerCase(), currentStatus);\n    setValidGuesses(newValidGuesses);\n    setCharStatus(newCharStatus);\n    setStatuses([...statuses, currentStatus]);\n    setCurrentStatus(Array(5).fill('unknown'));\n    setGuesses([...guesses, currentGuess]);\n    setCurrentGuess('');\n\n    if (guesses.length === MAX_CHALLENGES - 1) {\n      setIsGameLost(true);\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Div100vh, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-full flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        setIsInfoModalOpen: setIsInfoModalOpen,\n        setIsSettingsModalOpen: setIsSettingsModalOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex grow flex-col justify-center pb-6 short:pb-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mainbar-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                solution: solution,\n                guesses: guesses,\n                statuses: statuses,\n                currentGuess: currentGuess,\n                currentStatus: currentStatus,\n                onCell: onCell,\n                isRevealing: isRevealing,\n                currentRowClassName: currentRowClass\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(WordList, {\n              validWords: validGuesses\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n          onChar: onChar,\n          onDelete: onDelete,\n          onEnter: onEnter,\n          charStatuses: charStatus //isRevealing={isRevealing}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n          isOpen: isInfoModalOpen,\n          handleClose: () => setIsInfoModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n          isOpen: isSettingsModalOpen,\n          handleClose: () => setIsSettingsModalOpen(false),\n          isDarkMode: isDarkMode,\n          handleDarkMode: handleDarkMode,\n          isHighContrastMode: isHighContrastMode,\n          handleHighContrastMode: handleHighContrastMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xkvVEj99rO99cO7I9z9rrnFy7Wo=\", false, function () {\n  return [useAlert];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/App.tsx"],"names":["default","GraphemeSplitter","useEffect","useState","Div100vh","AlertContainer","Grid","Keyboard","WordList","InfoModal","SettingsModal","Navbar","DISCOURAGE_INAPP_BROWSERS","MAX_CHALLENGES","REVEAL_TIME_MS","WELCOME_INFO_MODAL_MS","CORRECT_WORD_MESSAGE","DISCOURAGE_INAPP_BROWSER_TEXT","NOT_ENOUGH_LETTERS_MESSAGE","NOT_VALID_INPUT","WORD_NOT_FOUND_MESSAGE","WORDS","useAlert","isInAppBrowser","getStoredIsHighContrastMode","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","setStoredIsHighContrastMode","loadStats","getIsLatestGame","getValidGuesses","isWordInWordList","solution","unicodeLength","App","isLatestGame","prefersDarkMode","window","matchMedia","matches","showError","showErrorAlert","showSuccess","showSuccessAlert","currentGuess","setCurrentGuess","currentStatus","setCurrentStatus","Array","fill","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","isHighContrastMode","setIsHighContrastMode","isRevealing","setIsRevealing","guesses","setGuesses","statuses","setStatuses","stats","setStats","validGuesses","setValidGuesses","sort","charStatus","setCharStatus","setTimeout","persist","durationMs","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHighContrastMode","isHighContrast","clearCurrentRowClass","onCell","position","newStatus","onChar","value","length","onDelete","newCurrentStatus","splitGraphemes","slice","join","onEnter","onClose","newCharStatus","i","letterIndex","charCodeAt","newValidGuesses","toLocaleLowerCase"],"mappings":"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","sourcesContent":["import './App.css'\n\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\nimport { useEffect, useState } from 'react'\nimport Div100vh from 'react-div-100vh'\n\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { WordList } from './components/list/WordList'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport { Navbar } from './components/navbar/Navbar'\nimport {\n  DISCOURAGE_INAPP_BROWSERS,\n  MAX_CHALLENGES,\n  REVEAL_TIME_MS,\n  WELCOME_INFO_MODAL_MS,\n} from './constants/settings'\nimport {\n  CORRECT_WORD_MESSAGE,\n  DISCOURAGE_INAPP_BROWSER_TEXT,\n  HARD_MODE_ALERT_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  NOT_VALID_INPUT,\n  WORD_NOT_FOUND_MESSAGE,\n} from './constants/strings'\nimport { WORDS } from './constants/wordlist'\nimport { useAlert } from './context/AlertContext'\nimport { isInAppBrowser } from './lib/browser'\nimport {\n  getStoredIsHighContrastMode,\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n} from './lib/localStorage'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport { CharStatus, getGuessStatuses } from './lib/statuses'\nimport {\n  findFirstUnusedReveal,\n  getGameDate,\n  getIsLatestGame,\n  getValidGuesses,\n  isWordInWordList,\n  solution,\n  unicodeLength,\n} from './lib/words'\n\nfunction App() {\n  const isLatestGame = getIsLatestGame()\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [currentStatus, setCurrentStatus] = useState<CharStatus[]>(() => {\n    return Array(5).fill('unknown')\n  })\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  const [isRevealing, setIsRevealing] = useState(-1)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    return []\n  })\n  const [statuses, setStatuses] = useState<CharStatus[][]>(() => {\n    return []\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [validGuesses, setValidGuesses] = useState([...WORDS.sort()])\n  const [charStatus, setCharStatus] = useState<CharStatus[]>(() => {\n    return Array(26).fill('unknown')\n  })\n\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true)\n      }, WELCOME_INFO_MODAL_MS)\n    }\n  })\n\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS &&\n      isInAppBrowser() &&\n      showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n        persist: false,\n        durationMs: 7000,\n      })\n  }, [showErrorAlert])\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), { guesses, solution })\n  }, [guesses])\n\n  const onCell = (position: number) => {\n    var newStatus = [...currentStatus]\n    if (currentStatus[position] === 'unknown') {\n      newStatus[position] = 'absent'\n    } else if (currentStatus[position] === 'absent') {\n      newStatus[position] = 'present'\n    } else if (currentStatus[position] === 'present') {\n      newStatus[position] = 'correct'\n    } else {\n      newStatus[position] = 'unknown'\n    }\n    setCurrentStatus(newStatus)\n    setIsRevealing(position)\n    setTimeout(() => {\n      setIsRevealing(-1)\n    }, REVEAL_TIME_MS)\n  }\n\n  const onChar = (value: string) => {\n    if (\n      unicodeLength(`${currentGuess}${value}`) <= solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    if (currentGuess.length > 0) {\n      let newCurrentStatus = [...currentStatus]\n      newCurrentStatus[currentGuess.length - 1] = 'unknown'\n      setCurrentStatus(newCurrentStatus)\n    }\n    setCurrentGuess(\n      new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join('')\n    )\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    var newCharStatus = [...charStatus]\n    for (let i = 0; i < currentStatus.length; i++) {\n      let letterIndex = currentGuess[i].charCodeAt(0) - 65\n      if (currentStatus[i] === 'unknown') {\n        return showErrorAlert(NOT_VALID_INPUT, {\n          onClose: clearCurrentRowClass,\n        })\n      } else if (currentStatus[i] === 'absent') {\n        if (\n          charStatus[letterIndex] === 'present' ||\n          charStatus[letterIndex] === 'correct'\n        ) {\n          return showErrorAlert(NOT_VALID_INPUT, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        if (newCharStatus[letterIndex] === 'unknown') {\n          newCharStatus[letterIndex] = 'absent'\n        }\n      } else if (currentStatus[i] === 'present') {\n        if (charStatus[letterIndex] === 'absent') {\n          return showErrorAlert(NOT_VALID_INPUT, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        if (\n          charStatus[letterIndex] !== 'correct' &&\n          newCharStatus[letterIndex] !== 'correct'\n        )\n          newCharStatus[letterIndex] = 'present'\n      } else {\n        if (currentStatus[i] === 'absent') {\n          return showErrorAlert(NOT_VALID_INPUT, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        newCharStatus[letterIndex] = 'correct'\n      }\n    }\n\n    let newValidGuesses = getValidGuesses(\n      validGuesses,\n      currentGuess.toLocaleLowerCase(),\n      currentStatus\n    )\n\n    setValidGuesses(newValidGuesses)\n    setCharStatus(newCharStatus)\n\n    setStatuses([...statuses, currentStatus])\n    setCurrentStatus(Array(5).fill('unknown'))\n\n    setGuesses([...guesses, currentGuess])\n    setCurrentGuess('')\n\n    if (guesses.length === MAX_CHALLENGES - 1) {\n      setIsGameLost(true)\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true,\n      })\n    }\n  }\n\n  return (\n    <Div100vh>\n      <div className=\"flex h-full flex-col\">\n        <Navbar\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n        <div className=\"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n          <div className=\"flex grow flex-col justify-center pb-6 short:pb-2\">\n            <div className=\"mainbar-content\">\n              <div>\n                <Grid\n                  solution={solution}\n                  guesses={guesses}\n                  statuses={statuses}\n                  currentGuess={currentGuess}\n                  currentStatus={currentStatus}\n                  onCell={onCell}\n                  isRevealing={isRevealing}\n                  currentRowClassName={currentRowClass}\n                />\n              </div>\n              <WordList validWords={validGuesses} />\n            </div>\n          </div>\n          <Keyboard\n            onChar={onChar}\n            onDelete={onDelete}\n            onEnter={onEnter}\n            charStatuses={charStatus}\n            //isRevealing={isRevealing}\n          />\n          <InfoModal\n            isOpen={isInfoModalOpen}\n            handleClose={() => setIsInfoModalOpen(false)}\n          />\n          <SettingsModal\n            isOpen={isSettingsModalOpen}\n            handleClose={() => setIsSettingsModalOpen(false)}\n            isDarkMode={isDarkMode}\n            handleDarkMode={handleDarkMode}\n            isHighContrastMode={isHighContrastMode}\n            handleHighContrastMode={handleHighContrastMode}\n          />\n          <AlertContainer />\n        </div>\n      </div>\n    </Div100vh>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}