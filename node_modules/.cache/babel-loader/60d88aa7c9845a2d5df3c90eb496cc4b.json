{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/components/grid/Grid.tsx\";\nimport { MAX_CHALLENGES } from '../../constants/settings';\nimport { CompletedRow } from './CompletedRow';\nimport { CurrentRow } from './CurrentRow';\nimport { EmptyRow } from './EmptyRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Grid = _ref => {\n  let {\n    solution,\n    guesses,\n    statuses,\n    currentGuess,\n    currentStatus,\n    isRevealing,\n    currentRowClassName\n  } = _ref;\n  const empties = guesses.length < MAX_CHALLENGES - 1 ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length)) : [];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(CompletedRow, {\n      status: statuses[i],\n      guess: guess,\n      isRevealing: isRevealing && guesses.length - 1 === i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)), guesses.length < MAX_CHALLENGES && /*#__PURE__*/_jsxDEV(CurrentRow, {\n      guess: currentGuess,\n      status: currentStatus,\n      className: currentRowClassName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), empties.map((_, i) => /*#__PURE__*/_jsxDEV(EmptyRow, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/components/grid/Grid.tsx"],"names":["MAX_CHALLENGES","CompletedRow","CurrentRow","EmptyRow","Grid","solution","guesses","statuses","currentGuess","currentStatus","isRevealing","currentRowClassName","empties","length","Array","from","map","guess","i","_"],"mappings":";AAEA,SAASA,cAAT,QAA+B,0BAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAYA,OAAO,MAAMC,IAAI,GAAG,QAQP;AAAA,MARQ;AACnBC,IAAAA,QADmB;AAEnBC,IAAAA,OAFmB;AAGnBC,IAAAA,QAHmB;AAInBC,IAAAA,YAJmB;AAKnBC,IAAAA,aALmB;AAMnBC,IAAAA,WANmB;AAOnBC,IAAAA;AAPmB,GAQR;AACX,QAAMC,OAAO,GACXN,OAAO,CAACO,MAAR,GAAiBb,cAAc,GAAG,CAAlC,GACIc,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACd,cAAc,GAAG,CAAjB,GAAqBM,OAAO,CAACO,MAA9B,CAAhB,CADJ,GAEI,EAHN;AAKA,sBACE;AAAA,eACGP,OAAO,CAACU,GAAR,CAAY,CAACC,KAAD,EAAQC,CAAR,kBACX,QAAC,YAAD;AAEE,MAAA,MAAM,EAAEX,QAAQ,CAACW,CAAD,CAFlB;AAGE,MAAA,KAAK,EAAED,KAHT;AAIE,MAAA,WAAW,EAAEP,WAAW,IAAIJ,OAAO,CAACO,MAAR,GAAiB,CAAjB,KAAuBK;AAJrD,OACOA,CADP;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EASGZ,OAAO,CAACO,MAAR,GAAiBb,cAAjB,iBACC,QAAC,UAAD;AACE,MAAA,KAAK,EAAEQ,YADT;AAEE,MAAA,MAAM,EAAEC,aAFV;AAGE,MAAA,SAAS,EAAEE;AAHb;AAAA;AAAA;AAAA;AAAA,YAVJ,EAgBGC,OAAO,CAACI,GAAR,CAAY,CAACG,CAAD,EAAID,CAAJ,kBACX,QAAC,QAAD,MAAeA,CAAf;AAAA;AAAA;AAAA;AAAA,YADD,CAhBH;AAAA,kBADF;AAsBD,CApCM;KAAMd,I","sourcesContent":["import { CharStatus } from '@/lib/statuses'\n\nimport { MAX_CHALLENGES } from '../../constants/settings'\nimport { CompletedRow } from './CompletedRow'\nimport { CurrentRow } from './CurrentRow'\nimport { EmptyRow } from './EmptyRow'\n\ntype Props = {\n  solution: string\n  guesses: string[]\n  statuses: CharStatus[][]\n  currentGuess: string\n  currentStatus: CharStatus[]\n  isRevealing?: boolean\n  currentRowClassName: string\n}\n\nexport const Grid = ({\n  solution,\n  guesses,\n  statuses,\n  currentGuess,\n  currentStatus,\n  isRevealing,\n  currentRowClassName,\n}: Props) => {\n  const empties =\n    guesses.length < MAX_CHALLENGES - 1\n      ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length))\n      : []\n\n  return (\n    <>\n      {guesses.map((guess, i) => (\n        <CompletedRow\n          key={i}\n          status={statuses[i]}\n          guess={guess}\n          isRevealing={isRevealing && guesses.length - 1 === i}\n        />\n      ))}\n      {guesses.length < MAX_CHALLENGES && (\n        <CurrentRow\n          guess={currentGuess}\n          status={currentStatus}\n          className={currentRowClassName}\n        />\n      )}\n      {empties.map((_, i) => (\n        <EmptyRow key={i} />\n      ))}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}