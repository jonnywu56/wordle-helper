{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Desktop/wordle-solver/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ClockIcon } from '@heroicons/react/outline';\nimport { format } from 'date-fns';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { AlertContainer } from './components/alerts/AlertContainer';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { SettingsModal } from './components/modals/SettingsModal';\nimport { Navbar } from './components/navbar/Navbar';\nimport { DATE_LOCALE, DISCOURAGE_INAPP_BROWSERS, MAX_CHALLENGES, REVEAL_TIME_MS, WELCOME_INFO_MODAL_MS } from './constants/settings';\nimport { CORRECT_WORD_MESSAGE, DISCOURAGE_INAPP_BROWSER_TEXT, HARD_MODE_ALERT_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WIN_MESSAGES, WORD_NOT_FOUND_MESSAGE } from './constants/strings';\nimport { WORDS } from './constants/wordlist';\nimport { useAlert } from './context/AlertContext';\nimport { isInAppBrowser } from './lib/browser';\nimport { getStoredIsHighContrastMode, loadGameStateFromLocalStorage, saveGameStateToLocalStorage, setStoredIsHighContrastMode } from './lib/localStorage';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { findFirstUnusedReveal, getGameDate, getIsLatestGame, getValidGuesses, isWordInWordList, solution, unicodeLength } from './lib/words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const isLatestGame = getIsLatestGame();\n  const gameDate = getGameDate();\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const {\n    showError: showErrorAlert,\n    showSuccess: showSuccessAlert\n  } = useAlert();\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentStatus, setCurrentStatus] = useState(() => {\n    return Array(5).fill('unknown');\n  });\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false);\n  const [isMigrateStatsModalOpen, setIsMigrateStatsModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [currentRowClass, setCurrentRowClass] = useState('');\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [isHighContrastMode, setIsHighContrastMode] = useState(getStoredIsHighContrastMode());\n  const [isRevealing, setIsRevealing] = useState(-1);\n  const [guesses, setGuesses] = useState(() => {\n    return [];\n  });\n  const [statuses, setStatuses] = useState(() => {\n    return [];\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false);\n  const [validGuesses, setValidGuesses] = useState([...WORDS]);\n  const [charStatus, setCharStatus] = useState(() => {\n    return Array(26).fill('unknown');\n  });\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true);\n      }, WELCOME_INFO_MODAL_MS);\n    }\n  });\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS && isInAppBrowser() && showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n      persist: false,\n      durationMs: 7000\n    });\n  }, [showErrorAlert]);\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  }, [isDarkMode, isHighContrastMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  const handleHardMode = isHard => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard);\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE);\n    }\n  };\n\n  const handleHighContrastMode = isHighContrast => {\n    setIsHighContrastMode(isHighContrast);\n    setStoredIsHighContrastMode(isHighContrast);\n  };\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('');\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), {\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage = WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)];\n      const delayMs = REVEAL_TIME_MS * solution.length;\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true)\n      });\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, (solution.length + 1) * REVEAL_TIME_MS);\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert]);\n\n  const onCell = position => {\n    var newStatus = [...currentStatus];\n\n    if (currentStatus[position] === 'unknown') {\n      newStatus[position] = 'absent';\n    } else if (currentStatus[position] === 'absent') {\n      newStatus[position] = 'present';\n    } else if (currentStatus[position] === 'present') {\n      newStatus[position] = 'correct';\n    } else {\n      newStatus[position] = 'unknown';\n    }\n\n    setCurrentStatus(newStatus);\n    setIsRevealing(position);\n    setTimeout(() => {\n      setIsRevealing(-1);\n    }, REVEAL_TIME_MS);\n  };\n\n  const onChar = value => {\n    if (unicodeLength(`${currentGuess}${value}`) <= solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    if (currentGuess.length > 0) {\n      let newCurrentStatus = [...currentStatus];\n      newCurrentStatus[currentGuess.length - 1] = 'unknown';\n      setCurrentStatus(newCurrentStatus);\n    }\n\n    setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n    console.log(currentStatus);\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    } // enforce hard mode - all guesses must contain all previously revealed letters\n\n\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle');\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass\n        });\n      }\n    }\n\n    var newCharStatus = [...charStatus];\n\n    for (let i = 0; i < currentStatus.length; i++) {\n      let letterIndex = currentGuess[i].charCodeAt(0) - 65;\n\n      if (currentStatus[i] === 'unknown') {\n        return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n          onClose: clearCurrentRowClass\n        });\n      } else if (currentStatus[i] === 'absent') {\n        if (charStatus[letterIndex] === 'present' || charStatus[letterIndex] === 'correct') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        if (newCharStatus[letterIndex] === 'unknown') {\n          newCharStatus[letterIndex] = 'absent';\n        }\n      } else if (currentStatus[i] === 'present') {\n        if (charStatus[letterIndex] === 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        if (charStatus[letterIndex] !== 'correct' && newCharStatus[letterIndex] !== 'correct') newCharStatus[letterIndex] = 'present';\n      } else {\n        if (currentStatus[letterIndex] === 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass\n          });\n        }\n\n        newCharStatus[letterIndex] = 'correct';\n      }\n    }\n\n    let newValidGuesses = getValidGuesses(validGuesses, currentGuess.toLocaleLowerCase(), currentStatus);\n    setValidGuesses(newValidGuesses);\n    console.log(newValidGuesses);\n    setCharStatus(newCharStatus);\n    const winningWord = false;\n\n    if (unicodeLength(currentGuess) === solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setStatuses([...statuses, currentStatus]);\n      setCurrentStatus(Array(5).fill('unknown'));\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length));\n        }\n\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        }\n\n        setIsGameLost(true);\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Div100vh, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-full flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        setIsInfoModalOpen: setIsInfoModalOpen,\n        setIsStatsModalOpen: setIsStatsModalOpen,\n        setIsDatePickerModalOpen: setIsDatePickerModalOpen,\n        setIsSettingsModalOpen: setIsSettingsModalOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), !isLatestGame && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(ClockIcon, {\n          className: \"h-6 w-6 stroke-gray-600 dark:stroke-gray-300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-base text-gray-600 dark:text-gray-300\",\n          children: format(gameDate, 'd MMMM yyyy', {\n            locale: DATE_LOCALE\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex grow flex-col justify-center pb-6 short:pb-2\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            solution: solution,\n            guesses: guesses,\n            statuses: statuses,\n            currentGuess: currentGuess,\n            currentStatus: currentStatus,\n            onCell: onCell,\n            isRevealing: isRevealing,\n            currentRowClassName: currentRowClass\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n          onChar: onChar,\n          onDelete: onDelete,\n          onEnter: onEnter,\n          charStatuses: charStatus //isRevealing={isRevealing}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n          isOpen: isInfoModalOpen,\n          handleClose: () => setIsInfoModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n          isOpen: isSettingsModalOpen,\n          handleClose: () => setIsSettingsModalOpen(false),\n          isHardMode: isHardMode,\n          handleHardMode: handleHardMode,\n          isDarkMode: isDarkMode,\n          handleDarkMode: handleDarkMode,\n          isHighContrastMode: isHighContrastMode,\n          handleHighContrastMode: handleHighContrastMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oKdXx18tmwFY+l/bdwlaWhTlglw=\", false, function () {\n  return [useAlert];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Jonny/Desktop/wordle-solver/src/App.tsx"],"names":["ClockIcon","format","default","GraphemeSplitter","useEffect","useState","Div100vh","AlertContainer","Grid","Keyboard","InfoModal","SettingsModal","Navbar","DATE_LOCALE","DISCOURAGE_INAPP_BROWSERS","MAX_CHALLENGES","REVEAL_TIME_MS","WELCOME_INFO_MODAL_MS","CORRECT_WORD_MESSAGE","DISCOURAGE_INAPP_BROWSER_TEXT","HARD_MODE_ALERT_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WIN_MESSAGES","WORD_NOT_FOUND_MESSAGE","WORDS","useAlert","isInAppBrowser","getStoredIsHighContrastMode","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","setStoredIsHighContrastMode","addStatsForCompletedGame","loadStats","findFirstUnusedReveal","getGameDate","getIsLatestGame","getValidGuesses","isWordInWordList","solution","unicodeLength","App","isLatestGame","gameDate","prefersDarkMode","window","matchMedia","matches","showError","showErrorAlert","showSuccess","showSuccessAlert","currentGuess","setCurrentGuess","currentStatus","setCurrentStatus","Array","fill","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isStatsModalOpen","setIsStatsModalOpen","isDatePickerModalOpen","setIsDatePickerModalOpen","isMigrateStatsModalOpen","setIsMigrateStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","isHighContrastMode","setIsHighContrastMode","isRevealing","setIsRevealing","guesses","setGuesses","statuses","setStatuses","stats","setStats","isHardMode","setIsHardMode","validGuesses","setValidGuesses","charStatus","setCharStatus","setTimeout","persist","durationMs","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","length","handleHighContrastMode","isHighContrast","clearCurrentRowClass","winMessage","Math","floor","random","delayMs","onClose","onCell","position","newStatus","onChar","value","onDelete","newCurrentStatus","splitGraphemes","slice","join","console","log","onEnter","firstMissingReveal","newCharStatus","i","letterIndex","charCodeAt","newValidGuesses","toLocaleLowerCase","winningWord","locale"],"mappings":"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","sourcesContent":["import './App.css'\n\nimport { ClockIcon } from '@heroicons/react/outline'\nimport { format } from 'date-fns'\nimport { once } from 'events'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\nimport { useEffect, useState } from 'react'\nimport Div100vh from 'react-div-100vh'\n\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { DatePickerModal } from './components/modals/DatePickerModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { MigrateStatsModal } from './components/modals/MigrateStatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { Navbar } from './components/navbar/Navbar'\nimport {\n  DATE_LOCALE,\n  DISCOURAGE_INAPP_BROWSERS,\n  LONG_ALERT_TIME_MS,\n  MAX_CHALLENGES,\n  REVEAL_TIME_MS,\n  WELCOME_INFO_MODAL_MS,\n} from './constants/settings'\nimport {\n  CORRECT_WORD_MESSAGE,\n  DISCOURAGE_INAPP_BROWSER_TEXT,\n  GAME_COPIED_MESSAGE,\n  HARD_MODE_ALERT_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  SHARE_FAILURE_TEXT,\n  WIN_MESSAGES,\n  WORD_NOT_FOUND_MESSAGE,\n} from './constants/strings'\nimport { WORDS } from './constants/wordlist'\nimport { useAlert } from './context/AlertContext'\nimport { isInAppBrowser } from './lib/browser'\nimport {\n  getStoredIsHighContrastMode,\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n} from './lib/localStorage'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport { CharStatus, getGuessStatuses } from './lib/statuses'\nimport {\n  findFirstUnusedReveal,\n  getGameDate,\n  getIsLatestGame,\n  getValidGuesses,\n  isWinningWord,\n  isWordInWordList,\n  setGameDate,\n  solution,\n  solutionGameDate,\n  unicodeLength,\n} from './lib/words'\n\nfunction App() {\n  const isLatestGame = getIsLatestGame()\n  const gameDate = getGameDate()\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [currentStatus, setCurrentStatus] = useState<CharStatus[]>(() => {\n    return Array(5).fill('unknown')\n  })\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false)\n  const [isMigrateStatsModalOpen, setIsMigrateStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  const [isRevealing, setIsRevealing] = useState(-1)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    return []\n  })\n  const [statuses, setStatuses] = useState<CharStatus[][]>(() => {\n    return []\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n\n  const [validGuesses, setValidGuesses] = useState([...WORDS])\n  const [charStatus, setCharStatus] = useState<CharStatus[]>(() => {\n    return Array(26).fill('unknown')\n  })\n\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true)\n      }, WELCOME_INFO_MODAL_MS)\n    }\n  })\n\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS &&\n      isInAppBrowser() &&\n      showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n        persist: false,\n        durationMs: 7000,\n      })\n  }, [showErrorAlert])\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE)\n    }\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), { guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage =\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      const delayMs = REVEAL_TIME_MS * solution.length\n\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true),\n      })\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, (solution.length + 1) * REVEAL_TIME_MS)\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert])\n\n  const onCell = (position: number) => {\n    var newStatus = [...currentStatus]\n    if (currentStatus[position] === 'unknown') {\n      newStatus[position] = 'absent'\n    } else if (currentStatus[position] === 'absent') {\n      newStatus[position] = 'present'\n    } else if (currentStatus[position] === 'present') {\n      newStatus[position] = 'correct'\n    } else {\n      newStatus[position] = 'unknown'\n    }\n    setCurrentStatus(newStatus)\n    setIsRevealing(position)\n    setTimeout(() => {\n      setIsRevealing(-1)\n    }, REVEAL_TIME_MS)\n  }\n\n  const onChar = (value: string) => {\n    if (\n      unicodeLength(`${currentGuess}${value}`) <= solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    if (currentGuess.length > 0) {\n      let newCurrentStatus = [...currentStatus]\n      newCurrentStatus[currentGuess.length - 1] = 'unknown'\n      setCurrentStatus(newCurrentStatus)\n    }\n    setCurrentGuess(\n      new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join('')\n    )\n    console.log(currentStatus)\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle')\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass,\n        })\n      }\n    }\n\n    var newCharStatus = [...charStatus]\n    for (let i = 0; i < currentStatus.length; i++) {\n      let letterIndex = currentGuess[i].charCodeAt(0) - 65\n      if (currentStatus[i] === 'unknown') {\n        return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n          onClose: clearCurrentRowClass,\n        })\n      } else if (currentStatus[i] === 'absent') {\n        if (\n          charStatus[letterIndex] === 'present' ||\n          charStatus[letterIndex] === 'correct'\n        ) {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        if (newCharStatus[letterIndex] === 'unknown') {\n          newCharStatus[letterIndex] = 'absent'\n        }\n      } else if (currentStatus[i] === 'present') {\n        if (charStatus[letterIndex] === 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        if (\n          charStatus[letterIndex] !== 'correct' &&\n          newCharStatus[letterIndex] !== 'correct'\n        )\n          newCharStatus[letterIndex] = 'present'\n      } else {\n        if (currentStatus[letterIndex] === 'absent') {\n          return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n            onClose: clearCurrentRowClass,\n          })\n        }\n        newCharStatus[letterIndex] = 'correct'\n      }\n    }\n\n    let newValidGuesses = getValidGuesses(\n      validGuesses,\n      currentGuess.toLocaleLowerCase(),\n      currentStatus\n    )\n    setValidGuesses(newValidGuesses)\n\n    console.log(newValidGuesses)\n\n    setCharStatus(newCharStatus)\n\n    const winningWord = false\n\n    if (\n      unicodeLength(currentGuess) === solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setStatuses([...statuses, currentStatus])\n      setCurrentStatus(Array(5).fill('unknown'))\n\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length))\n        }\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        }\n        setIsGameLost(true)\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1,\n        })\n      }\n    }\n  }\n\n  return (\n    <Div100vh>\n      <div className=\"flex h-full flex-col\">\n        <Navbar\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsStatsModalOpen={setIsStatsModalOpen}\n          setIsDatePickerModalOpen={setIsDatePickerModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n\n        {!isLatestGame && (\n          <div className=\"flex items-center justify-center\">\n            <ClockIcon className=\"h-6 w-6 stroke-gray-600 dark:stroke-gray-300\" />\n            <p className=\"text-base text-gray-600 dark:text-gray-300\">\n              {format(gameDate, 'd MMMM yyyy', { locale: DATE_LOCALE })}\n            </p>\n          </div>\n        )}\n\n        <div className=\"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n          <div className=\"flex grow flex-col justify-center pb-6 short:pb-2\">\n            <Grid\n              solution={solution}\n              guesses={guesses}\n              statuses={statuses}\n              currentGuess={currentGuess}\n              currentStatus={currentStatus}\n              onCell={onCell}\n              isRevealing={isRevealing}\n              currentRowClassName={currentRowClass}\n            />\n          </div>\n          <Keyboard\n            onChar={onChar}\n            onDelete={onDelete}\n            onEnter={onEnter}\n            charStatuses={charStatus}\n            //isRevealing={isRevealing}\n          />\n          <InfoModal\n            isOpen={isInfoModalOpen}\n            handleClose={() => setIsInfoModalOpen(false)}\n          />\n          <SettingsModal\n            isOpen={isSettingsModalOpen}\n            handleClose={() => setIsSettingsModalOpen(false)}\n            isHardMode={isHardMode}\n            handleHardMode={handleHardMode}\n            isDarkMode={isDarkMode}\n            handleDarkMode={handleDarkMode}\n            isHighContrastMode={isHighContrastMode}\n            handleHighContrastMode={handleHighContrastMode}\n          />\n          <AlertContainer />\n        </div>\n      </div>\n    </Div100vh>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}